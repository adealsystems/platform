// This file contains the configuration of all subprojects.
//
// The libraries, i.e. the definition of external dependencies
// (group, artifact, version) are located in externalDependencies.gradle
//
// Be aware that subprojects must also be specified in settings.gradle!
// Otherwise Gradle won't pick them up!

def platformTime = project(':org.adealsystems.platform.time') {
    description = "Time-related code"
    dependencies {
        implementation libraries.'slf4j-api'
    }
}

def platformId = project(':org.adealsystems.platform.id') {
    dependencies {
        implementation libraries.'slf4j-api'
        implementation platformTime
    }
}

project(':org.adealsystems.platform.id.hadoop') {
    dependencies {
        implementation libraries.'slf4j-api'
        implementation platformId
        implementation libraries.'hadoop-common'
        testImplementation libraries.'jcl-over-slf4j'
    }
}

def platformProcess = project(':org.adealsystems.platform.process') {
    dependencies {
        implementation platformId
        implementation libraries.'slf4j-api'
    }
}

def platformIo = project(':org.adealsystems.platform.io') {
    dependencies {
        implementation libraries.'slf4j-api'
    }
}

def platformIoTest = project(':org.adealsystems.platform.io.test') {
    dependencies {
    }
}

def platformIoCompression = project(':org.adealsystems.platform.io.compression') {
    dependencies {
        implementation libraries.'slf4j-api'
        implementation libraries.'commons-compress'
        implementation libraries.'snappy'
    }
}

def platformIoLine = project(':org.adealsystems.platform.io.line') {
    dependencies {
        implementation libraries.'slf4j-api'
        implementation platformIo
        implementation platformIoCompression
    }
}

project(':org.adealsystems.platform.io.csv') {
    dependencies {
        implementation platformIo
        implementation platformIoCompression
        implementation libraries.'commons-csv'
        implementation libraries.'commons-io'
        testImplementation platformIoTest
    }
}

project(':org.adealsystems.platform.io.json') {
    dependencies {
        implementation platformIo
        implementation platformIoCompression
        implementation platformIoLine
        implementation libraries.'jackson-databind'
    }
}

project(':org.adealsystems.platform.io.avro') {
    dependencies {
        implementation platformIo
        implementation libraries.'avro'
        testImplementation platformIoTest
        testRuntimeOnly libraries.'snappy' // optional snappy codec dependency
        testRuntimeOnly libraries.'xz' // optional xz codec dependency
        testRuntimeOnly libraries.'zstd' // optional zstandard codec dependency
    }
}

def platformSparkTest = project(':org.adealsystems.platform.spark.test') {
    dependencies {
        implementation platformId
        implementation platformProcess
        implementation libraries.'slf4j-api'
        implementation libraries.'spark-core'
        implementation libraries.'spark-sql' // for SparkSession m(
        implementation libraries.'junit-jupiter-api'
        implementation libraries.'spock-core'
    }
}

def platformSpark = project(':org.adealsystems.platform.spark') {
    dependencies {
        implementation platformId
        implementation platformProcess
        implementation libraries.'slf4j-api'
        compileOnly libraries.'spark-core'
        compileOnly libraries.'spark-sql' // for SparkSession m(
        testImplementation libraries.'spark-sql' // for SparkSession m(
        testImplementation platformSparkTest
    }
}

def platformSparkUdf = project(':org.adealsystems.platform.spark.udf') {
    dependencies {
        implementation platformTime
        compileOnly libraries.'spark-sql'
        testImplementation libraries.'spark-sql'
    }
}

def platformSparkMain = project(':org.adealsystems.platform.spark.main') {
    dependencies {
        implementation platformId
        implementation platformTime
        implementation platformProcess
        implementation platformSpark
        implementation libraries.'spring-context'
        compileOnly libraries.'spark-core'
        compileOnly libraries.'spark-sql' // for SparkSession m(
    }
}

def platformSparkExample = project(':org.adealsystems.platform.spark.example') {
    dependencies {
        implementation platformId
        implementation platformProcess
        implementation platformSpark
        implementation platformSparkUdf
        implementation libraries.'slf4j-api'
        compileOnly libraries.'spark-core'
        compileOnly libraries.'spark-sql' // for SparkSession m(
        testImplementation platformSparkTest
        testImplementation libraries.'spark-sql' // for SparkSession m(
    }
}

def platformSparkConfigExample = project(':org.adealsystems.platform.spark.config.example') {
    dependencies {
        implementation platformProcess
        implementation platformSpark
        implementation platformSparkExample
        implementation libraries.'spring-context'
    }
}

project(':org.adealsystems.platform.spark.app.example') {
    apply plugin: 'application'
    apply plugin: 'com.gorylenko.gradle-git-properties'
    apply plugin: 'com.github.johnrengelman.shadow'

    gitProperties {
        gitPropertiesName = 'adeal-platform-git.properties'
        keys = ['git.dirty', 'git.commit.id', 'git.commit.id.abbrev', 'git.commit.time']
        customProperty 'build.name', { project.name }
        customProperty 'build.version', { project.version }
    }

    configurations {
        // see https://stackoverflow.com/questions/51048644/exclude-a-specific-dependency-from-springboots-bootjar-gradle-task/51109759
        runtimeExcludedFromBootJar
        runtime.extendsFrom runtimeExcludedFromBootJar
    }

    mainClassName = 'org.adealsystems.platform.spark.main.Application'

    dependencies {
        runtimeOnly platformSparkMain
        runtimeOnly platformSparkConfigExample
        runtimeExcludedFromBootJar libraries.'spark-core'
        runtimeExcludedFromBootJar libraries.'spark-sql' // for SparkSession m(
        runtimeOnly 'org.codehaus.janino:janino:3.0.9' // Spark sucks
        runtimeOnly 'org.codehaus.janino:commons-compiler:3.0.9' // Spark sucks
    }

    def firstLevelProvided = project.configurations.runtimeExcludedFromBootJar.getResolvedConfiguration().getFirstLevelModuleDependencies()
    def artifactsToExclude = getResolvedArtifacts(firstLevelProvided)
    artifactsToExclude.each { artifact ->
        project.logger.info "Excluding ${artifact} from being bundled into the shadow jar."
        shadowJar {
            dependencies {
                exclude(dependency(artifact))
            }
        }
    }

    // javadoc: error - No public or protected classes found to document.
    // 1 error
    // seinfeld.gif
    javadoc.enabled = false

    // disable anything we don't actually need.
    distZip.enabled = false
    distTar.enabled = false
    shadowDistZip.enabled = false
    shadowDistTar.enabled = false
    //jar.enabled = false
    sourcesJar.enabled = false
    javadocJar.enabled = false
}

project(':org.adealsystems.platform.webcollector') {
    dependencies {
        implementation platformIo
        implementation libraries.'slf4j-api'
        implementation libraries.'httpclient'
        runtimeOnly libraries.'httpcore'
        testImplementation libraries.'jackson-databind'
        testRuntimeOnly libraries.'logback-classic'
        testRuntimeOnly libraries.'jcl-over-slf4j'
    }
}

project(':org.adealsystems.platform.state') {
    dependencies {
        implementation libraries.'slf4j-api'
        implementation platformId
        implementation libraries.'jackson-databind'
    }
}
