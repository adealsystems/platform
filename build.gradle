if (!JavaVersion.current().isJava11Compatible()) {
    throw new RuntimeException("This build requires Java 11! https://adoptopenjdk.net/")
}
apply from: 'externalDependencies.gradle'

// This defines the Gradle version to be used by this build.
// The wrapper task can be executed with 'gradle wrapper'.
// It creates the 'gradlew'/'gradlew.bat' files, as well as
// required stub files in the 'gradle' directory.
//
// Using those scripts ensures that the correct Gradle version
// is used (and downloaded automatically).
wrapper {
    gradleVersion = '7.3.3'
}

def javaMajorVersion = 8

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.3.0.RELEASE"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE"
        classpath "de.thetaphi:forbiddenapis:3.2"
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.2"
        classpath "gradle.plugin.org.cadixdev.gradle:licenser:0.6.1"
        //classpath "gradle.plugin.org.ec4j.gradle:editorconfig-gradle-plugin:0.0.3"
    }
}

def globalSourceCompatibility = 1.8
def globalTargetCompatibility = 1.8

// https://github.com/kt3k/coveralls-gradle-plugin

// the block below configures all projects, i.e. the rootProject
// and all subprojects
allprojects {
    apply plugin: 'project-reports'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    //apply plugin: 'org.ec4j.editorconfig'

    group = 'org.adealsystems'
    version = '0.28.0'
    def prereleaseIdentifier = System.properties.'prerelease'
    if (prereleaseIdentifier) {
        version = version + '-' + prereleaseIdentifier
    } else if (!System.properties.'release') {
        version = version + '-SNAPSHOT'
    }

    jacoco {
        toolVersion = '0.8.7'
    }

    repositories {
        mavenCentral()
    }

    def compilerArgs = ['-Xlint:all']
    tasks.withType(JavaCompile) {
        options.release = javaMajorVersion
        options.encoding = 'UTF-8'
        options.debug = true // default, but let's be explicit
        options.compilerArgs = compilerArgs
    }
    tasks.withType(GroovyCompile) {
        options.release = javaMajorVersion
        options.encoding = 'UTF-8'
        options.debug = true // default, but let's be explicit
        options.compilerArgs = compilerArgs
    }
    tasks.withType(Javadoc) {
        options.optionFiles << rootProject.file('config/javadoc.options')
        // it's actually --release but one - is added automatically. *eyeroll*
        options.addStringOption('-release', "" + javaMajorVersion)
    }

    // the tasks to be executed if no tasks are given explicitly.
    defaultTasks 'build', 'licenseCheck'
}

// the block below configures all subprojects, i.e. the rootProject
// is excluded
subprojects {
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'de.thetaphi.forbiddenapis'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'org.cadixdev.licenser'

    license {
        header = rootProject.file('license_header.txt')
        include '**/*.java', '**/*.groovy'
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        configProperties = [
                'configDir': rootProject.file('config/checkstyle'),
                'baseDir'  : rootDir,
        ]
        toolVersion = '9.2'
        //ignoreFailures = true
    }

    pmd {
        ruleSetFiles = files(rootProject.file('config/pmd/ruleSet.xml'))
        ruleSets = []
        toolVersion = '6.41.0'
        incrementalAnalysis = true
        //ignoreFailures = true
    }

    forbiddenApis {
        bundledSignatures = [
                'jdk-unsafe-1.8',
                'jdk-deprecated-1.8',
                'jdk-internal-1.8',
                'jdk-non-portable',
                //'jdk-system-out',
                'jdk-reflection',
                //'commons-io-unsafe-2.5',
        ]
        ignoreFailures = false
        //failOnUnresolvableSignatures = false
    }

    jacocoTestReport {
        additionalSourceDirs.from(files(sourceSets.main.allSource.srcDirs))
        sourceDirectories.from(files(sourceSets.main.allSource.srcDirs))
        classDirectories.from(files(sourceSets.main.output))
        reports {
            html.required = true
            xml.required = true
            csv.required = false
        }
    }

    // global exclude of "bad" dependencies
    configurations {
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        all*.exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }

    test {
        useJUnitPlatform()
    }

    // this gives all subprojects a default set of test dependencies
    dependencies {
        testImplementation libraries.'byte-buddy'
        testImplementation libraries.'groovy'
        testImplementation libraries.'groovy-nio'
        testImplementation libraries.'slf4j-api'
        testImplementation libraries.'spock-core'
        testImplementation libraries.'junit-jupiter-api'
        testRuntimeOnly libraries.'junit-jupiter-engine'
        testRuntimeOnly libraries.'jcl-over-slf4j'
        testRuntimeOnly libraries.'logback-classic'
    }
}

configure(subprojects
        -project(':org.adealsystems.platform.spark.example')
        -project(':org.adealsystems.platform.spark.config.example')
        -project(':org.adealsystems.platform.spark.app.example')
) {

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")
    project.description = project.name

    publishing {
        repositories {
            maven {
                def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = isReleaseVersion ? releaseRepo : snapshotRepo
                credentials {
                    username = findProperty('sonatypeUsername')
                    password = findProperty('sonatypePassword')
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                afterEvaluate {
                    pom {
                        groupId = 'org.adealsystems'
                        name = project.name
                        description = project.description
                        url = 'https://github.com/adealsystems/platform/'
                        from components.java
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        scm {
                            connection = 'scm:git:git@github.com:adealsystems/platform.git'
                            developerConnection = 'scm:git:git@github.com:adealsystems/platform.git'
                            url = 'https://github.com/adealsystems/platform/'
                        }
                        developers {
                            developer {
                                id = 'robFifth'
                                name = 'Robert Virga'
                                email = 'robert.virga@adeal-systems.com'
                            }
                            developer {
                                id = 'huxi'
                                name = 'Joern Huxhorn'
                                email = 'joern.huxhorn@adeal-systems.com'
                            }
                            developer {
                                id = 'vlad'
                                name = 'Vlad Satanovski'
                                email = 'vlad.satanovski@adeal-systems.com'
                            }
                        }
                    }
                }
            }
        }
    }

    signing {
        // signs jar, source und javadoc
        sign publishing.publications.mavenJava
    }

    tasks.withType(Sign) {
        onlyIf { isReleaseVersion }
    }

}


// source: https://gist.github.com/aalmiray/e6f54aa4b3803be0bcac
task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.jacocoTestReport
    dependsOn = subprojects.test
    additionalSourceDirs.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    sourceDirectories.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    classDirectories.setFrom(files(subprojects.sourceSets.main.output))
    executionData.setFrom(fileTree(dir: "${rootProject.projectDir}", includes: ['**/build/jacoco/*.exec']))
    reports {
        html.required = true
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        csv.required = false
    }
}


def getResolvedArtifacts(Set<ResolvedArtifact> artifacts) {
    Set<String> resolvedArtifacts = [] as Set
    artifacts.each {
        // add current artifact
        resolvedArtifacts << "${it.moduleGroup}:${it.moduleName}:${it.moduleVersion}"

        // recursion to add children
        resolvedArtifacts += getResolvedArtifacts(it.children)
    }
    return resolvedArtifacts
}

// the configuration of the subprojects is located in the file referenced below
apply from: 'projects.gradle'
